# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.

from django.db import models

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=240, unique=True)
    class Meta:
        db_table = u'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = u'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=150)
    content_type = models.ForeignKey(DjangoContentType)
    codename = models.CharField(max_length=300, unique=True)
    class Meta:
        db_table = u'auth_permission'

class AuthRegistration(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    activation_key = models.CharField(max_length=96, unique=True)
    class Meta:
        db_table = u'auth_registration'

class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)
    username = models.CharField(max_length=90, unique=True)
    first_name = models.CharField(max_length=90)
    last_name = models.CharField(max_length=90)
    email = models.CharField(max_length=225, unique=True, blank=True)
    password = models.CharField(max_length=384)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    is_superuser = models.IntegerField()
    last_login = models.DateTimeField()
    date_joined = models.DateTimeField()
    class Meta:
        db_table = u'auth_user'

class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)
    class Meta:
        db_table = u'auth_user_groups'

class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = u'auth_user_user_permissions'

class AuthUserprofile(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    name = models.CharField(max_length=765)
    language = models.CharField(max_length=765)
    location = models.CharField(max_length=765)
    meta = models.TextField()
    courseware = models.CharField(max_length=765)
    gender = models.CharField(max_length=18, blank=True)
    mailing_address = models.TextField(blank=True)
    year_of_birth = models.IntegerField(null=True, blank=True)
    level_of_education = models.CharField(max_length=18, blank=True)
    goals = models.TextField(blank=True)
    allow_certificate = models.IntegerField()
    country = models.CharField(max_length=381, blank=True)
    city = models.CharField(max_length=381, blank=True)
    district = models.CharField(max_length=381, blank=True)
    zip_code = models.CharField(max_length=45, blank=True)
    telephone_number = models.CharField(max_length=93, blank=True)
    last_login_ip = models.CharField(max_length=45, blank=True)
    nickname = models.CharField(max_length=765, unique=True, blank=True)
    phone_number = models.CharField(max_length=150, unique=True, blank=True)
    avatar = models.CharField(max_length=765)
    unique_code = models.CharField(max_length=60, unique=True, blank=True)
    class Meta:
        db_table = u'auth_userprofile'

class BbsActivity(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    title = models.CharField(max_length=765, blank=True)
    subtitle = models.CharField(max_length=765, blank=True)
    link = models.CharField(max_length=12288)
    tag = models.ForeignKey(BbsTag, null=True, blank=True)
    picture_url = models.CharField(max_length=3072)
    type = models.IntegerField()
    order = models.IntegerField()
    class Meta:
        db_table = u'bbs_activity'

class BbsAnnouncement(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    title = models.CharField(max_length=765, blank=True)
    content = models.TextField()
    class Meta:
        db_table = u'bbs_announcement'

class BbsCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    name = models.CharField(max_length=765, unique=True)
    slug = models.CharField(max_length=765, unique=True)
    icon = models.CharField(max_length=3072, blank=True)
    order = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'bbs_category'

class BbsComment(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    title = models.CharField(max_length=765)
    content = models.TextField()
    html_content = models.TextField()
    status = models.IntegerField()
    post = models.ForeignKey(BbsPost)
    reference = models.ForeignKey('self', null=True, blank=True)
    user = models.ForeignKey(AuthUser)
    reply_to = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'bbs_comment'

class BbsLike(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    reference_id = models.IntegerField()
    reference_type = models.IntegerField()
    user = models.ForeignKey(AuthUser)
    status = models.IntegerField()
    class Meta:
        db_table = u'bbs_like'

class BbsPost(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    title = models.CharField(max_length=765)
    content = models.TextField()
    html_content = models.TextField()
    status = models.IntegerField()
    hot_count = models.IntegerField()
    category = models.ForeignKey(BbsCategory)
    promotion_order = models.IntegerField(null=True, blank=True)
    user = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'bbs_post'

class BbsPostTags(models.Model):
    id = models.IntegerField(primary_key=True)
    post = models.ForeignKey(BbsPost)
    tag = models.ForeignKey(BbsTag)
    class Meta:
        db_table = u'bbs_post_tags'

class BbsReport(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    object_type = models.CharField(max_length=765)
    object_id = models.IntegerField()
    status = models.IntegerField()
    reason = models.IntegerField()
    detail = models.CharField(max_length=765, blank=True)
    reporter = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'bbs_report'

class BbsTag(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    name = models.CharField(max_length=765, unique=True)
    slug = models.CharField(max_length=765, unique=True)
    class Meta:
        db_table = u'bbs_tag'

class BulkEmailCourseauthorization(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    email_enabled = models.IntegerField()
    class Meta:
        db_table = u'bulk_email_courseauthorization'

class BulkEmailCourseemail(models.Model):
    id = models.IntegerField(primary_key=True)
    sender = models.ForeignKey(AuthUser, null=True, blank=True)
    slug = models.CharField(max_length=384)
    subject = models.CharField(max_length=384)
    html_message = models.TextField(blank=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    course_id = models.CharField(max_length=765)
    to_option = models.CharField(max_length=192)
    text_message = models.TextField(blank=True)
    template_name = models.CharField(max_length=765, blank=True)
    from_addr = models.CharField(max_length=765, blank=True)
    class Meta:
        db_table = u'bulk_email_courseemail'

class BulkEmailCourseemailtemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    html_template = models.TextField(blank=True)
    plain_template = models.TextField(blank=True)
    name = models.CharField(max_length=765, unique=True, blank=True)
    class Meta:
        db_table = u'bulk_email_courseemailtemplate'

class BulkEmailOptout(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    user = models.ForeignKey(AuthUser, null=True, blank=True)
    class Meta:
        db_table = u'bulk_email_optout'

class CeleryTaskmeta(models.Model):
    id = models.IntegerField(primary_key=True)
    task_id = models.CharField(max_length=765, unique=True)
    status = models.CharField(max_length=150)
    result = models.TextField(blank=True)
    date_done = models.DateTimeField()
    traceback = models.TextField(blank=True)
    hidden = models.IntegerField()
    meta = models.TextField(blank=True)
    class Meta:
        db_table = u'celery_taskmeta'

class CeleryTasksetmeta(models.Model):
    id = models.IntegerField(primary_key=True)
    taskset_id = models.CharField(max_length=765, unique=True)
    result = models.TextField()
    date_done = models.DateTimeField()
    hidden = models.IntegerField()
    class Meta:
        db_table = u'celery_tasksetmeta'

class CertificatesCertificatewhitelist(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    course_id = models.CharField(max_length=765)
    whitelist = models.IntegerField()
    class Meta:
        db_table = u'certificates_certificatewhitelist'

class CertificatesGeneratedcertificate(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    download_url = models.CharField(max_length=384)
    grade = models.CharField(max_length=15)
    course_id = models.CharField(max_length=765, unique=True)
    key = models.CharField(max_length=96)
    distinction = models.IntegerField()
    status = models.CharField(max_length=96)
    verify_uuid = models.CharField(max_length=96)
    download_uuid = models.CharField(max_length=96)
    name = models.CharField(max_length=765)
    created_date = models.DateTimeField()
    modified_date = models.DateTimeField()
    error_reason = models.CharField(max_length=1536)
    mode = models.CharField(max_length=96)
    class Meta:
        db_table = u'certificates_generatedcertificate'

class CircuitServercircuit(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=96, unique=True)
    schematic = models.TextField()
    class Meta:
        db_table = u'circuit_servercircuit'

class ContentstoreVideouploadconfig(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    profile_whitelist = models.TextField()
    class Meta:
        db_table = u'contentstore_videouploadconfig'

class CourseActionStateCoursererunstate(models.Model):
    id = models.IntegerField(primary_key=True)
    created_time = models.DateTimeField()
    updated_time = models.DateTimeField()
    created_user = models.ForeignKey(AuthUser, null=True, blank=True)
    updated_user = models.ForeignKey(AuthUser, null=True, blank=True)
    course_key = models.CharField(max_length=765)
    action = models.CharField(max_length=300)
    state = models.CharField(max_length=150)
    should_display = models.IntegerField()
    message = models.CharField(max_length=3000)
    source_course_key = models.CharField(max_length=765)
    display_name = models.CharField(max_length=765)
    class Meta:
        db_table = u'course_action_state_coursererunstate'

class CourseCreatorsCoursecreator(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    state_changed = models.DateTimeField()
    state = models.CharField(max_length=72)
    note = models.CharField(max_length=1536)
    class Meta:
        db_table = u'course_creators_coursecreator'

class CourseGroupsCourseusergroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765, unique=True)
    course_id = models.CharField(max_length=765)
    group_type = models.CharField(max_length=60)
    class Meta:
        db_table = u'course_groups_courseusergroup'

class CourseGroupsCourseusergroupUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    courseusergroup = models.ForeignKey(CourseGroupsCourseusergroup)
    user = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'course_groups_courseusergroup_users'

class CourseGroupsCourseusergrouppartitiongroup(models.Model):
    id = models.IntegerField(primary_key=True)
    course_user_group = models.ForeignKey(CourseGroupsCourseusergroup, unique=True)
    partition_id = models.IntegerField()
    group_id = models.IntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    class Meta:
        db_table = u'course_groups_courseusergrouppartitiongroup'

class CourseMetaCategorygroup(models.Model):
    id = models.IntegerField(primary_key=True)
    slug = models.CharField(max_length=192)
    name = models.CharField(max_length=384, blank=True)
    active = models.IntegerField()
    desp = models.CharField(max_length=765, blank=True)
    owner = models.CharField(max_length=765)
    class Meta:
        db_table = u'course_meta_categorygroup'

class CourseMetaCourse(models.Model):
    id = models.IntegerField(primary_key=True)
    status = models.IntegerField()
    course_id = models.CharField(max_length=765, unique=True)
    course_num = models.CharField(max_length=765)
    org = models.CharField(max_length=384)
    name = models.CharField(max_length=765)
    run = models.CharField(max_length=765)
    subtitle = models.CharField(max_length=1536)
    create_time = models.DateTimeField()
    modified = models.DateTimeField()
    enrollment_start = models.DateTimeField(null=True, blank=True)
    enrollment_end = models.DateTimeField(null=True, blank=True)
    start = models.DateTimeField(null=True, blank=True)
    end = models.DateTimeField(null=True, blank=True)
    intro_video = models.CharField(max_length=765)
    thumbnail = models.CharField(max_length=765)
    video_thumbnail = models.CharField(max_length=765)
    effort = models.CharField(max_length=384)
    length = models.CharField(max_length=384)
    quiz = models.CharField(max_length=384)
    prerequisites = models.CharField(max_length=3072)
    about = models.TextField()
    chapters = models.TextField()
    serialized = models.IntegerField()
    owner = models.CharField(max_length=192)
    original_url = models.CharField(max_length=765)
    keywords = models.CharField(max_length=765)
    class Meta:
        db_table = u'course_meta_course'

class CourseMetaCourseCategory(models.Model):
    id = models.IntegerField(primary_key=True)
    course = models.ForeignKey(CourseMetaCourse)
    coursecategory = models.ForeignKey(CourseMetaCoursecategory)
    class Meta:
        db_table = u'course_meta_course_category'

class CourseMetaCoursecategory(models.Model):
    id = models.IntegerField(primary_key=True)
    parent_id = models.IntegerField(null=True, blank=True)
    name = models.CharField(max_length=192)
    group = models.ForeignKey(CourseMetaCategorygroup)
    class Meta:
        db_table = u'course_meta_coursecategory'

class CourseMetaCourseinknowledgemap(models.Model):
    id = models.IntegerField(primary_key=True)
    tag = models.CharField(max_length=384)
    level = models.CharField(max_length=96)
    priority = models.IntegerField()
    course_id = models.ForeignKey(CourseMetaCourse)
    map_id = models.ForeignKey(CourseMetaKnowledgemap)
    class Meta:
        db_table = u'course_meta_courseinknowledgemap'

class CourseMetaCourseqa(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.ForeignKey(CourseMetaCourse)
    question = models.TextField()
    answer = models.TextField()
    order = models.IntegerField()
    class Meta:
        db_table = u'course_meta_courseqa'

class CourseMetaCoursestaffrelationship(models.Model):
    id = models.IntegerField(primary_key=True)
    staff = models.ForeignKey(CourseMetaStaff)
    course = models.ForeignKey(CourseMetaCourse)
    role = models.IntegerField()
    class Meta:
        db_table = u'course_meta_coursestaffrelationship'

class CourseMetaFollow(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    create_time = models.DateTimeField()
    target_type = models.CharField(max_length=381, unique=True)
    target_id = models.CharField(max_length=765, unique=True)
    class Meta:
        db_table = u'course_meta_follow'

class CourseMetaHomepagecourses(models.Model):
    id = models.IntegerField(primary_key=True)
    course = models.ForeignKey(CourseMetaCourse)
    order = models.IntegerField()
    locked = models.IntegerField()
    description = models.CharField(max_length=3072)
    class Meta:
        db_table = u'course_meta_homepagecourses'

class CourseMetaKnowledgemap(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=192)
    introduction = models.CharField(max_length=3072)
    class Meta:
        db_table = u'course_meta_knowledgemap'

class CourseMetaOrganization(models.Model):
    id = models.IntegerField(primary_key=True)
    org = models.CharField(max_length=384)
    name = models.CharField(max_length=765)
    about = models.TextField()
    class Meta:
        db_table = u'course_meta_organization'

class CourseMetaStaff(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765)
    org_id = models.ForeignKey(CourseMetaOrganization)
    company = models.CharField(max_length=765)
    department = models.CharField(max_length=765)
    position = models.CharField(max_length=765)
    avartar = models.CharField(max_length=765)
    about = models.TextField()
    mailing_address = models.CharField(max_length=225, blank=True)
    class Meta:
        db_table = u'course_meta_staff'

class CourseModesCoursedescription(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    description = models.TextField()
    describe_by = models.CharField(max_length=3072)
    status = models.IntegerField()
    order = models.IntegerField()
    class Meta:
        db_table = u'course_modes_coursedescription'

class CourseModesCoursemode(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    mode_slug = models.CharField(max_length=300, unique=True)
    mode_display_name = models.CharField(max_length=765)
    min_price = models.IntegerField()
    suggested_prices = models.CharField(max_length=765)
    currency = models.CharField(max_length=24, unique=True)
    expiration_date = models.DateField(null=True, blank=True)
    expiration_datetime = models.DateTimeField(null=True, blank=True)
    description = models.TextField(blank=True)
    refund_instructions = models.CharField(max_length=765, blank=True)
    refund_type = models.CharField(max_length=96)
    expiration_days = models.IntegerField()
    class Meta:
        db_table = u'course_modes_coursemode'

class CourseModesCoursemodesarchive(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    mode_slug = models.CharField(max_length=300)
    mode_display_name = models.CharField(max_length=765)
    min_price = models.IntegerField()
    suggested_prices = models.CharField(max_length=765)
    currency = models.CharField(max_length=24)
    expiration_date = models.DateField(null=True, blank=True)
    expiration_datetime = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'course_modes_coursemodesarchive'

class CoursewareOfflinecomputedgrade(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    course_id = models.CharField(max_length=765)
    created = models.DateTimeField(null=True, blank=True)
    updated = models.DateTimeField()
    gradeset = models.TextField(blank=True)
    class Meta:
        db_table = u'courseware_offlinecomputedgrade'

class CoursewareOfflinecomputedgradelog(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    created = models.DateTimeField(null=True, blank=True)
    seconds = models.IntegerField()
    nstudents = models.IntegerField()
    class Meta:
        db_table = u'courseware_offlinecomputedgradelog'

class CoursewareStudentmodule(models.Model):
    id = models.IntegerField(primary_key=True)
    module_type = models.CharField(max_length=96)
    module_id = models.CharField(max_length=765)
    student = models.ForeignKey(AuthUser)
    state = models.TextField(blank=True)
    grade = models.FloatField(null=True, blank=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    max_grade = models.FloatField(null=True, blank=True)
    done = models.CharField(max_length=24)
    course_id = models.CharField(max_length=765)
    class Meta:
        db_table = u'courseware_studentmodule'

class CoursewareStudentmodulehistory(models.Model):
    id = models.IntegerField(primary_key=True)
    student_module = models.ForeignKey(CoursewareStudentmodule)
    version = models.CharField(max_length=765, blank=True)
    created = models.DateTimeField()
    state = models.TextField(blank=True)
    grade = models.FloatField(null=True, blank=True)
    max_grade = models.FloatField(null=True, blank=True)
    class Meta:
        db_table = u'courseware_studentmodulehistory'

class CoursewareXmodulestudentinfofield(models.Model):
    id = models.IntegerField(primary_key=True)
    field_name = models.CharField(max_length=192)
    value = models.TextField()
    student = models.ForeignKey(AuthUser)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'courseware_xmodulestudentinfofield'

class CoursewareXmodulestudentprefsfield(models.Model):
    id = models.IntegerField(primary_key=True)
    field_name = models.CharField(max_length=192)
    module_type = models.CharField(max_length=192)
    value = models.TextField()
    student = models.ForeignKey(AuthUser)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'courseware_xmodulestudentprefsfield'

class CoursewareXmoduleuserstatesummaryfield(models.Model):
    id = models.IntegerField(primary_key=True)
    field_name = models.CharField(max_length=192)
    usage_id = models.CharField(max_length=765)
    value = models.TextField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'courseware_xmoduleuserstatesummaryfield'

class CredentialCoupon(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    create_time = models.DateTimeField()
    modified_time = models.DateTimeField()
    end = models.DateTimeField()
    status = models.IntegerField()
    type = models.CharField(max_length=765)
    comment = models.CharField(max_length=765)
    data = models.CharField(max_length=765)
    class Meta:
        db_table = u'credential_coupon'

class CredentialExchanging(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    coupon = models.ForeignKey(CredentialCoupon, unique=True, null=True, blank=True)
    country = models.CharField(max_length=381, blank=True)
    city = models.CharField(max_length=381, blank=True)
    district = models.CharField(max_length=381, blank=True)
    address = models.CharField(max_length=765, blank=True)
    zip_code = models.CharField(max_length=45, blank=True)
    name = models.CharField(max_length=381, blank=True)
    telephone_number = models.CharField(max_length=60, blank=True)
    type = models.CharField(max_length=765)
    data = models.CharField(max_length=765)
    class Meta:
        db_table = u'credential_exchanging'

class CredentialExchangingactivity(models.Model):
    id = models.IntegerField(primary_key=True)
    exchanging = models.ForeignKey(CredentialExchanging)
    status = models.CharField(max_length=189)
    title = models.CharField(max_length=765)
    detail = models.CharField(max_length=3069)
    comment = models.CharField(max_length=765)
    create_time = models.DateTimeField()
    class Meta:
        db_table = u'credential_exchangingactivity'

class DarkLangDarklangconfig(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    released_languages = models.TextField()
    class Meta:
        db_table = u'dark_lang_darklangconfig'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    content_type = models.ForeignKey(DjangoContentType, null=True, blank=True)
    object_id = models.TextField(blank=True)
    object_repr = models.CharField(max_length=600)
    action_flag = models.IntegerField()
    change_message = models.TextField()
    class Meta:
        db_table = u'django_admin_log'

class DjangoCommentClientPermission(models.Model):
    name = models.CharField(max_length=90, primary_key=True)
    class Meta:
        db_table = u'django_comment_client_permission'

class DjangoCommentClientPermissionRoles(models.Model):
    id = models.IntegerField(primary_key=True)
    permission = models.ForeignKey(DjangoCommentClientPermission)
    role = models.ForeignKey(DjangoCommentClientRole)
    class Meta:
        db_table = u'django_comment_client_permission_roles'

class DjangoCommentClientRole(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=90)
    course_id = models.CharField(max_length=765)
    class Meta:
        db_table = u'django_comment_client_role'

class DjangoCommentClientRoleUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    role = models.ForeignKey(DjangoCommentClientRole)
    user = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'django_comment_client_role_users'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=300)
    app_label = models.CharField(max_length=300, unique=True)
    model = models.CharField(max_length=300, unique=True)
    class Meta:
        db_table = u'django_content_type'

class DjangoOpenidAuthAssociation(models.Model):
    id = models.IntegerField(primary_key=True)
    server_url = models.TextField()
    handle = models.CharField(max_length=765)
    secret = models.TextField()
    issued = models.IntegerField()
    lifetime = models.IntegerField()
    assoc_type = models.TextField()
    class Meta:
        db_table = u'django_openid_auth_association'

class DjangoOpenidAuthNonce(models.Model):
    id = models.IntegerField(primary_key=True)
    server_url = models.CharField(max_length=6141)
    timestamp = models.IntegerField()
    salt = models.CharField(max_length=120)
    class Meta:
        db_table = u'django_openid_auth_nonce'

class DjangoOpenidAuthUseropenid(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    claimed_id = models.TextField()
    display_id = models.TextField()
    class Meta:
        db_table = u'django_openid_auth_useropenid'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=120, primary_key=True)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = u'django_session'

class DjangoSite(models.Model):
    id = models.IntegerField(primary_key=True)
    domain = models.CharField(max_length=300)
    name = models.CharField(max_length=150)
    class Meta:
        db_table = u'django_site'

class DjceleryCrontabschedule(models.Model):
    id = models.IntegerField(primary_key=True)
    minute = models.CharField(max_length=192)
    hour = models.CharField(max_length=192)
    day_of_week = models.CharField(max_length=192)
    day_of_month = models.CharField(max_length=192)
    month_of_year = models.CharField(max_length=192)
    class Meta:
        db_table = u'djcelery_crontabschedule'

class DjceleryIntervalschedule(models.Model):
    id = models.IntegerField(primary_key=True)
    every = models.IntegerField()
    period = models.CharField(max_length=72)
    class Meta:
        db_table = u'djcelery_intervalschedule'

class DjceleryPeriodictask(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=600, unique=True)
    task = models.CharField(max_length=600)
    interval = models.ForeignKey(DjceleryIntervalschedule, null=True, blank=True)
    crontab = models.ForeignKey(DjceleryCrontabschedule, null=True, blank=True)
    args = models.TextField()
    kwargs = models.TextField()
    queue = models.CharField(max_length=600, blank=True)
    exchange = models.CharField(max_length=600, blank=True)
    routing_key = models.CharField(max_length=600, blank=True)
    expires = models.DateTimeField(null=True, blank=True)
    enabled = models.IntegerField()
    last_run_at = models.DateTimeField(null=True, blank=True)
    total_run_count = models.IntegerField()
    date_changed = models.DateTimeField()
    description = models.TextField()
    class Meta:
        db_table = u'djcelery_periodictask'

class DjceleryPeriodictasks(models.Model):
    ident = models.IntegerField(primary_key=True)
    last_update = models.DateTimeField()
    class Meta:
        db_table = u'djcelery_periodictasks'

class DjceleryTaskstate(models.Model):
    id = models.IntegerField(primary_key=True)
    state = models.CharField(max_length=192)
    task_id = models.CharField(max_length=108, unique=True)
    name = models.CharField(max_length=600, blank=True)
    tstamp = models.DateTimeField()
    args = models.TextField(blank=True)
    kwargs = models.TextField(blank=True)
    eta = models.DateTimeField(null=True, blank=True)
    expires = models.DateTimeField(null=True, blank=True)
    result = models.TextField(blank=True)
    traceback = models.TextField(blank=True)
    runtime = models.FloatField(null=True, blank=True)
    retries = models.IntegerField()
    worker = models.ForeignKey(DjceleryWorkerstate, null=True, blank=True)
    hidden = models.IntegerField()
    class Meta:
        db_table = u'djcelery_taskstate'

class DjceleryWorkerstate(models.Model):
    id = models.IntegerField(primary_key=True)
    hostname = models.CharField(max_length=765, unique=True)
    last_heartbeat = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'djcelery_workerstate'

class EdxvalCoursevideo(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765, unique=True)
    video = models.ForeignKey(EdxvalVideo)
    class Meta:
        db_table = u'edxval_coursevideo'

class EdxvalEncodedvideo(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    url = models.CharField(max_length=600)
    file_size = models.IntegerField()
    bitrate = models.IntegerField()
    profile = models.ForeignKey(EdxvalProfile)
    video = models.ForeignKey(EdxvalVideo)
    class Meta:
        db_table = u'edxval_encodedvideo'

class EdxvalProfile(models.Model):
    id = models.IntegerField(primary_key=True)
    profile_name = models.CharField(max_length=150, unique=True)
    extension = models.CharField(max_length=30)
    width = models.IntegerField()
    height = models.IntegerField()
    class Meta:
        db_table = u'edxval_profile'

class EdxvalSubtitle(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    video = models.ForeignKey(EdxvalVideo)
    fmt = models.CharField(max_length=60)
    language = models.CharField(max_length=24)
    content = models.TextField()
    class Meta:
        db_table = u'edxval_subtitle'

class EdxvalVideo(models.Model):
    id = models.IntegerField(primary_key=True)
    edx_video_id = models.CharField(max_length=300, unique=True)
    client_video_id = models.CharField(max_length=765)
    duration = models.FloatField()
    created = models.DateTimeField()
    status = models.CharField(max_length=765)
    class Meta:
        db_table = u'edxval_video'

class EmbargoEmbargoedcourse(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765, unique=True)
    embargoed = models.IntegerField()
    class Meta:
        db_table = u'embargo_embargoedcourse'

class EmbargoEmbargoedstate(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    embargoed_countries = models.TextField()
    class Meta:
        db_table = u'embargo_embargoedstate'

class EmbargoIpfilter(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    whitelist = models.TextField()
    blacklist = models.TextField()
    class Meta:
        db_table = u'embargo_ipfilter'

class EventEvent(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=384, unique=True)
    template = models.CharField(max_length=384)
    title = models.CharField(max_length=765)
    body = models.TextField()
    js_data = models.TextField()
    js_extra = models.TextField()
    css_extra = models.TextField()
    create_time = models.DateTimeField()
    is_active = models.IntegerField()
    class Meta:
        db_table = u'event_event'

class ExternalAuthExternalauthmap(models.Model):
    id = models.IntegerField(primary_key=True)
    external_id = models.CharField(max_length=765)
    external_domain = models.CharField(max_length=765)
    external_credentials = models.TextField()
    external_email = models.CharField(max_length=765)
    external_name = models.CharField(max_length=765)
    user = models.ForeignKey(AuthUser, unique=True, null=True, blank=True)
    internal_password = models.CharField(max_length=93)
    dtcreated = models.DateTimeField()
    dtsignup = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'external_auth_externalauthmap'

class FolditPuzzlecomplete(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    unique_user_id = models.CharField(max_length=150)
    puzzle_id = models.IntegerField(unique=True)
    puzzle_set = models.IntegerField()
    puzzle_subset = models.IntegerField()
    created = models.DateTimeField()
    class Meta:
        db_table = u'foldit_puzzlecomplete'

class FolditScore(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    unique_user_id = models.CharField(max_length=150)
    puzzle_id = models.IntegerField()
    best_score = models.FloatField()
    current_score = models.FloatField()
    score_version = models.IntegerField()
    created = models.DateTimeField()
    class Meta:
        db_table = u'foldit_score'

class ForumComment(models.Model):
    id = models.IntegerField(primary_key=True)
    topic = models.ForeignKey(ForumTopic)
    user = models.ForeignKey(AuthUser)
    content = models.TextField()
    parent = models.ForeignKey('self', null=True, blank=True)
    status = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'forum_comment'

class ForumPlate(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=765)
    slug = models.CharField(max_length=765, unique=True)
    description = models.TextField()
    user = models.ForeignKey(AuthUser)
    created = models.DateTimeField()
    status = models.IntegerField()
    parent = models.ForeignKey('self', null=True, blank=True)
    location = models.CharField(max_length=1536)
    class Meta:
        db_table = u'forum_plate'

class ForumPraise(models.Model):
    id = models.IntegerField(primary_key=True)
    praise = models.IntegerField(unique=True)
    type = models.IntegerField(unique=True)
    user = models.ForeignKey(AuthUser)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    status = models.IntegerField()
    class Meta:
        db_table = u'forum_praise'

class ForumTopic(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=765)
    slug = models.CharField(max_length=765, unique=True)
    content = models.TextField()
    user = models.ForeignKey(AuthUser)
    plate = models.ForeignKey(ForumPlate)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    status = models.IntegerField()
    location = models.CharField(max_length=1536)
    class Meta:
        db_table = u'forum_topic'

class InstructorTaskInstructortask(models.Model):
    id = models.IntegerField(primary_key=True)
    task_type = models.CharField(max_length=150)
    course_id = models.CharField(max_length=765)
    task_key = models.CharField(max_length=765)
    task_input = models.CharField(max_length=765)
    task_id = models.CharField(max_length=765)
    task_state = models.CharField(max_length=150, blank=True)
    task_output = models.CharField(max_length=3072, blank=True)
    requester = models.ForeignKey(AuthUser)
    created = models.DateTimeField(null=True, blank=True)
    updated = models.DateTimeField()
    subtasks = models.TextField()
    class Meta:
        db_table = u'instructor_task_instructortask'

class LectureBreakpoint(models.Model):
    id = models.IntegerField(primary_key=True)
    lecture = models.ForeignKey(LectureLecture)
    thumbnail = models.CharField(max_length=600)
    time = models.CharField(max_length=93, unique=True)
    title = models.CharField(max_length=765)
    content = models.CharField(max_length=1533)
    class Meta:
        db_table = u'lecture_breakpoint'

class LectureLecture(models.Model):
    id = models.IntegerField(primary_key=True)
    thumbnail = models.CharField(max_length=600)
    video = models.CharField(max_length=381)
    title = models.CharField(max_length=765)
    subtitle = models.CharField(max_length=1533)
    about = models.TextField()
    meta = models.TextField(blank=True)
    start = models.DateTimeField()
    is_active = models.IntegerField()
    views = models.IntegerField()
    parent = models.ForeignKey('self', null=True, blank=True)
    type = models.CharField(max_length=189)
    order = models.IntegerField()
    owner = models.CharField(max_length=192)
    class Meta:
        db_table = u'lecture_lecture'

class LectureLectureTag(models.Model):
    id = models.IntegerField(primary_key=True)
    lecture = models.ForeignKey(LectureLecture)
    tag = models.ForeignKey(LectureTag)
    class Meta:
        db_table = u'lecture_lecture_tag'

class LectureLecturecourse(models.Model):
    id = models.IntegerField(primary_key=True)
    lecture = models.ForeignKey(LectureLecture)
    course_id = models.IntegerField()
    weight = models.IntegerField()
    class Meta:
        db_table = u'lecture_lecturecourse'

class LectureLecturefavorite(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    lecture = models.ForeignKey(LectureLecture)
    create_time = models.DateTimeField()
    class Meta:
        db_table = u'lecture_lecturefavorite'

class LectureLecturestaff(models.Model):
    id = models.IntegerField(primary_key=True)
    lecture = models.ForeignKey(LectureLecture)
    staff_id = models.IntegerField()
    role = models.IntegerField()
    class Meta:
        db_table = u'lecture_lecturestaff'

class LectureTag(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765, unique=True)
    url = models.CharField(max_length=600)
    class Meta:
        db_table = u'lecture_tag'

class LectureVideoset(models.Model):
    id = models.IntegerField(primary_key=True)
    lecture = models.ForeignKey(LectureLecture)
    thumbnail = models.CharField(max_length=600)
    video = models.CharField(max_length=381)
    duration = models.CharField(max_length=93)
    title = models.CharField(max_length=765)
    subtitle = models.CharField(max_length=1533)
    order = models.IntegerField(unique=True)
    class Meta:
        db_table = u'lecture_videoset'

class LicensesCoursesoftware(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765)
    full_name = models.CharField(max_length=765)
    url = models.CharField(max_length=765)
    course_id = models.CharField(max_length=765)
    class Meta:
        db_table = u'licenses_coursesoftware'

class LicensesUserlicense(models.Model):
    id = models.IntegerField(primary_key=True)
    software = models.ForeignKey(LicensesCoursesoftware)
    user = models.ForeignKey(AuthUser, null=True, blank=True)
    serial = models.CharField(max_length=765)
    class Meta:
        db_table = u'licenses_userlicense'

class LmsXblockXblockasidesconfig(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    disabled_blocks = models.TextField()
    class Meta:
        db_table = u'lms_xblock_xblockasidesconfig'

class MilestonesCoursecontentmilestone(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    course_id = models.CharField(max_length=765)
    content_id = models.CharField(max_length=765)
    milestone = models.ForeignKey(MilestonesMilestone)
    milestone_relationship_type = models.ForeignKey(MilestonesMilestonerelationshiptype)
    active = models.IntegerField()
    class Meta:
        db_table = u'milestones_coursecontentmilestone'

class MilestonesCoursemilestone(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    course_id = models.CharField(max_length=765)
    milestone = models.ForeignKey(MilestonesMilestone)
    milestone_relationship_type = models.ForeignKey(MilestonesMilestonerelationshiptype)
    active = models.IntegerField()
    class Meta:
        db_table = u'milestones_coursemilestone'

class MilestonesMilestone(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    namespace = models.CharField(max_length=765)
    name = models.CharField(max_length=765)
    display_name = models.CharField(max_length=765)
    description = models.TextField()
    active = models.IntegerField()
    class Meta:
        db_table = u'milestones_milestone'

class MilestonesMilestonerelationshiptype(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    name = models.CharField(max_length=75, unique=True)
    description = models.TextField()
    active = models.IntegerField()
    class Meta:
        db_table = u'milestones_milestonerelationshiptype'

class MilestonesUsermilestone(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    user_id = models.IntegerField()
    milestone = models.ForeignKey(MilestonesMilestone)
    source = models.TextField()
    collected = models.DateTimeField(null=True, blank=True)
    active = models.IntegerField()
    class Meta:
        db_table = u'milestones_usermilestone'

class NotesNote(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    course_id = models.CharField(max_length=765)
    uri = models.CharField(max_length=765)
    text = models.TextField()
    quote = models.TextField()
    range_start = models.CharField(max_length=6144)
    range_start_offset = models.IntegerField()
    range_end = models.CharField(max_length=6144)
    range_end_offset = models.IntegerField()
    tags = models.TextField()
    created = models.DateTimeField(null=True, blank=True)
    updated = models.DateTimeField()
    class Meta:
        db_table = u'notes_note'

class NotificationNotification(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    type = models.CharField(max_length=150)
    status = models.IntegerField()
    meta = models.TextField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'notification_notification'

class NotificationsArticlesubscription(models.Model):
    subscription_ptr = models.ForeignKey(NotifySubscription, unique=True)
    articleplugin_ptr = models.ForeignKey(WikiArticleplugin, primary_key=True)
    class Meta:
        db_table = u'notifications_articlesubscription'

class NotifyNotification(models.Model):
    id = models.IntegerField(primary_key=True)
    subscription = models.ForeignKey(NotifySubscription, null=True, blank=True)
    message = models.TextField()
    url = models.CharField(max_length=600, blank=True)
    is_viewed = models.IntegerField()
    is_emailed = models.IntegerField()
    created = models.DateTimeField()
    class Meta:
        db_table = u'notify_notification'

class NotifyNotificationtype(models.Model):
    key = models.CharField(max_length=384, primary_key=True)
    label = models.CharField(max_length=384, blank=True)
    content_type = models.ForeignKey(DjangoContentType, null=True, blank=True)
    class Meta:
        db_table = u'notify_notificationtype'

class NotifySettings(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    interval = models.IntegerField()
    class Meta:
        db_table = u'notify_settings'

class NotifySubscription(models.Model):
    id = models.IntegerField(primary_key=True)
    settings = models.ForeignKey(NotifySettings)
    notification_type = models.ForeignKey(NotifyNotificationtype)
    object_id = models.CharField(max_length=192, blank=True)
    send_emails = models.IntegerField()
    class Meta:
        db_table = u'notify_subscription'

class Oauth2Accesstoken(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    token = models.CharField(max_length=765)
    client = models.ForeignKey(Oauth2Client)
    expires = models.DateTimeField()
    scope = models.IntegerField()
    class Meta:
        db_table = u'oauth2_accesstoken'

class Oauth2Client(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, null=True, blank=True)
    url = models.CharField(max_length=600)
    redirect_uri = models.CharField(max_length=600)
    client_id = models.CharField(max_length=765)
    client_secret = models.CharField(max_length=765)
    client_type = models.IntegerField()
    name = models.CharField(max_length=765)
    class Meta:
        db_table = u'oauth2_client'

class Oauth2Grant(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    client = models.ForeignKey(Oauth2Client)
    code = models.CharField(max_length=765)
    expires = models.DateTimeField()
    redirect_uri = models.CharField(max_length=765)
    scope = models.IntegerField()
    class Meta:
        db_table = u'oauth2_grant'

class Oauth2Refreshtoken(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    token = models.CharField(max_length=765)
    access_token = models.ForeignKey(Oauth2Accesstoken, unique=True)
    client = models.ForeignKey(Oauth2Client)
    expired = models.IntegerField()
    class Meta:
        db_table = u'oauth2_refreshtoken'

class PsychometricsPsychometricdata(models.Model):
    id = models.IntegerField(primary_key=True)
    studentmodule_id = models.IntegerField(unique=True)
    done = models.IntegerField()
    attempts = models.IntegerField()
    checktimes = models.TextField(blank=True)
    class Meta:
        db_table = u'psychometrics_psychometricdata'

class ReverificationMidcoursereverificationgrade(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    location = models.CharField(max_length=765)
    grade_type = models.CharField(max_length=765)
    type = models.CharField(max_length=765)
    status = models.IntegerField()
    class Meta:
        db_table = u'reverification_midcoursereverificationgrade'

class ReverificationMidcoursereverificationwindow(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=765)
    start_date = models.DateTimeField(null=True, blank=True)
    end_date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'reverification_midcoursereverificationwindow'

class SeriesCourseCoursecondition(models.Model):
    id = models.IntegerField(primary_key=True)
    major = models.ForeignKey(SeriesCourseMajor)
    course = models.ForeignKey(CourseMetaCourse)
    condition = models.ForeignKey(CourseMetaCourse)
    type = models.IntegerField()
    class Meta:
        db_table = u'series_course_coursecondition'

class SeriesCourseCourseenrolledbeforemajor(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    course = models.ForeignKey(CourseMetaCourse)
    major_enrollment = models.ForeignKey(SeriesCourseMajorenrollment)
    course_enrollment = models.ForeignKey(StudentCourseenrollment)
    create_time = models.DateTimeField()
    course_enrollment_mode = models.CharField(max_length=765)
    class Meta:
        db_table = u'series_course_courseenrolledbeforemajor'

class SeriesCourseMajor(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765, unique=True)
    title = models.CharField(max_length=765)
    description = models.CharField(max_length=3072, blank=True)
    template = models.CharField(max_length=150, blank=True)
    create_time = models.DateTimeField()
    status = models.IntegerField()
    type = models.IntegerField()
    class Meta:
        db_table = u'series_course_major'

class SeriesCourseMajorcourse(models.Model):
    id = models.IntegerField(primary_key=True)
    major = models.ForeignKey(SeriesCourseMajor)
    level = models.ForeignKey(SeriesCourseMajorlevel)
    course = models.ForeignKey(CourseMetaCourse)
    type = models.IntegerField()
    class Meta:
        db_table = u'series_course_majorcourse'

class SeriesCourseMajorenrollment(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    major = models.ForeignKey(SeriesCourseMajor)
    created_time = models.DateTimeField()
    is_active = models.IntegerField()
    mode = models.CharField(max_length=300)
    class Meta:
        db_table = u'series_course_majorenrollment'

class SeriesCourseMajorlevel(models.Model):
    id = models.IntegerField(primary_key=True)
    major = models.ForeignKey(SeriesCourseMajor)
    level = models.IntegerField()
    title = models.CharField(max_length=765)
    description = models.CharField(max_length=3072, blank=True)
    class Meta:
        db_table = u'series_course_majorlevel'

class SeriesCourseMajormode(models.Model):
    id = models.IntegerField(primary_key=True)
    major = models.ForeignKey(SeriesCourseMajor)
    mode_slug = models.CharField(max_length=300, unique=True)
    mode_display_name = models.CharField(max_length=765, blank=True)
    suggested_price = models.DecimalField(max_digits=32, decimal_places=2)
    price = models.DecimalField(max_digits=32, decimal_places=2)
    currency = models.CharField(max_length=150, unique=True)
    expiration_datetime = models.DateTimeField(null=True, blank=True)
    description = models.TextField(blank=True)
    class Meta:
        db_table = u'series_course_majormode'

class SeriesCourseMajoroption(models.Model):
    id = models.IntegerField(primary_key=True)
    major = models.ForeignKey(SeriesCourseMajor)
    option_key = models.CharField(max_length=765)
    option_name = models.CharField(max_length=765)
    option_value = models.TextField()
    option_order = models.IntegerField()
    class Meta:
        db_table = u'series_course_majoroption'

class ShoppingcartCertificateitem(models.Model):
    orderitem_ptr = models.ForeignKey(ShoppingcartOrderitem, primary_key=True)
    course_id = models.CharField(max_length=384)
    course_enrollment = models.ForeignKey(StudentCourseenrollment)
    mode = models.CharField(max_length=150)
    class Meta:
        db_table = u'shoppingcart_certificateitem'

class ShoppingcartCoupon(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=96)
    description = models.CharField(max_length=765, blank=True)
    course_id = models.CharField(max_length=765)
    percentage_discount = models.IntegerField()
    created_by = models.ForeignKey(AuthUser)
    created_at = models.DateTimeField()
    is_active = models.IntegerField()
    expiration_date = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'shoppingcart_coupon'

class ShoppingcartCouponredemption(models.Model):
    id = models.IntegerField(primary_key=True)
    order = models.ForeignKey(ShoppingcartOrder)
    user = models.ForeignKey(AuthUser)
    coupon = models.ForeignKey(ShoppingcartCoupon)
    class Meta:
        db_table = u'shoppingcart_couponredemption'

class ShoppingcartCourseregcodeitem(models.Model):
    orderitem_ptr = models.ForeignKey(ShoppingcartOrderitem, primary_key=True)
    course_id = models.CharField(max_length=384)
    mode = models.CharField(max_length=150)
    class Meta:
        db_table = u'shoppingcart_courseregcodeitem'

class ShoppingcartCourseregcodeitemannotation(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=384, unique=True)
    annotation = models.TextField(blank=True)
    class Meta:
        db_table = u'shoppingcart_courseregcodeitemannotation'

class ShoppingcartCourseregistrationcode(models.Model):
    id = models.IntegerField(primary_key=True)
    code = models.CharField(max_length=96)
    course_id = models.CharField(max_length=765)
    created_by = models.ForeignKey(AuthUser)
    created_at = models.DateTimeField()
    invoice = models.ForeignKey(ShoppingcartInvoice, null=True, blank=True)
    order = models.ForeignKey(ShoppingcartOrder, null=True, blank=True)
    mode_slug = models.CharField(max_length=300, blank=True)
    class Meta:
        db_table = u'shoppingcart_courseregistrationcode'

class ShoppingcartDonation(models.Model):
    orderitem_ptr = models.ForeignKey(ShoppingcartOrderitem, primary_key=True)
    donation_type = models.CharField(max_length=96)
    course_id = models.CharField(max_length=765)
    class Meta:
        db_table = u'shoppingcart_donation'

class ShoppingcartDonationconfiguration(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    class Meta:
        db_table = u'shoppingcart_donationconfiguration'

class ShoppingcartInvoice(models.Model):
    id = models.IntegerField(primary_key=True)
    total_amount = models.FloatField()
    company_name = models.CharField(max_length=765)
    course_id = models.CharField(max_length=765)
    internal_reference = models.CharField(max_length=765, blank=True)
    is_valid = models.IntegerField()
    address_line_1 = models.CharField(max_length=765)
    address_line_2 = models.CharField(max_length=765, blank=True)
    address_line_3 = models.CharField(max_length=765, blank=True)
    city = models.CharField(max_length=765, blank=True)
    state = models.CharField(max_length=765, blank=True)
    zip = models.CharField(max_length=45, blank=True)
    country = models.CharField(max_length=192, blank=True)
    recipient_name = models.CharField(max_length=765)
    recipient_email = models.CharField(max_length=765)
    customer_reference_number = models.CharField(max_length=189, blank=True)
    company_contact_name = models.CharField(max_length=765)
    company_contact_email = models.CharField(max_length=765)
    class Meta:
        db_table = u'shoppingcart_invoice'

class ShoppingcartMajoritem(models.Model):
    orderitem_ptr = models.ForeignKey(ShoppingcartOrderitem, primary_key=True)
    major = models.ForeignKey(SeriesCourseMajor)
    major_enrollment = models.ForeignKey(SeriesCourseMajorenrollment)
    mode = models.CharField(max_length=300)
    class Meta:
        db_table = u'shoppingcart_majoritem'

class ShoppingcartOrder(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    currency = models.CharField(max_length=24)
    status = models.CharField(max_length=96)
    purchase_time = models.DateTimeField(null=True, blank=True)
    bill_to_first = models.CharField(max_length=192)
    bill_to_last = models.CharField(max_length=192)
    bill_to_street1 = models.CharField(max_length=384)
    bill_to_street2 = models.CharField(max_length=384)
    bill_to_city = models.CharField(max_length=192)
    bill_to_state = models.CharField(max_length=24)
    bill_to_postalcode = models.CharField(max_length=48)
    bill_to_country = models.CharField(max_length=192)
    bill_to_ccnum = models.CharField(max_length=24)
    bill_to_cardtype = models.CharField(max_length=96)
    processor_reply_dump = models.TextField()
    refunded_time = models.DateTimeField(null=True, blank=True)
    company_name = models.CharField(max_length=765, blank=True)
    company_contact_name = models.CharField(max_length=765, blank=True)
    company_contact_email = models.CharField(max_length=765, blank=True)
    recipient_name = models.CharField(max_length=765, blank=True)
    recipient_email = models.CharField(max_length=765, blank=True)
    customer_reference_number = models.CharField(max_length=189, blank=True)
    order_type = models.CharField(max_length=96)
    class Meta:
        db_table = u'shoppingcart_order'

class ShoppingcartOrderitem(models.Model):
    id = models.IntegerField(primary_key=True)
    order = models.ForeignKey(ShoppingcartOrder)
    user = models.ForeignKey(AuthUser)
    status = models.CharField(max_length=96)
    qty = models.IntegerField()
    unit_cost = models.DecimalField(max_digits=32, decimal_places=2)
    line_desc = models.CharField(max_length=3072)
    currency = models.CharField(max_length=24)
    fulfilled_time = models.DateTimeField(null=True, blank=True)
    report_comments = models.TextField()
    refund_requested_time = models.DateTimeField(null=True, blank=True)
    service_fee = models.DecimalField(max_digits=32, decimal_places=2)
    list_price = models.DecimalField(null=True, max_digits=32, decimal_places=2, blank=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'shoppingcart_orderitem'

class ShoppingcartPaidcourseregistration(models.Model):
    orderitem_ptr = models.ForeignKey(ShoppingcartOrderitem, primary_key=True)
    course_id = models.CharField(max_length=384)
    mode = models.CharField(max_length=150)
    course_enrollment = models.ForeignKey(StudentCourseenrollment, null=True, blank=True)
    class Meta:
        db_table = u'shoppingcart_paidcourseregistration'

class ShoppingcartPaidcourseregistrationannotation(models.Model):
    id = models.IntegerField(primary_key=True)
    course_id = models.CharField(max_length=384, unique=True)
    annotation = models.TextField(blank=True)
    class Meta:
        db_table = u'shoppingcart_paidcourseregistrationannotation'

class ShoppingcartRefundrecord(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    course_id = models.CharField(max_length=765)
    order_id = models.CharField(max_length=765)
    reasons = models.CharField(max_length=765)
    telephone = models.CharField(max_length=150)
    refunded_time = models.DateTimeField(null=True, blank=True)
    status = models.CharField(max_length=96)
    created_at = models.DateTimeField()
    class Meta:
        db_table = u'shoppingcart_refundrecord'

class ShoppingcartRegistrationcoderedemption(models.Model):
    id = models.IntegerField(primary_key=True)
    order = models.ForeignKey(ShoppingcartOrder, null=True, blank=True)
    registration_code = models.ForeignKey(ShoppingcartCourseregistrationcode)
    redeemed_by = models.ForeignKey(AuthUser)
    redeemed_at = models.DateTimeField(null=True, blank=True)
    course_enrollment = models.ForeignKey(StudentCourseenrollment, null=True, blank=True)
    class Meta:
        db_table = u'shoppingcart_registrationcoderedemption'

class SocialAuthAssociation(models.Model):
    id = models.IntegerField(primary_key=True)
    server_url = models.CharField(max_length=765, unique=True)
    handle = models.CharField(max_length=765, unique=True)
    secret = models.CharField(max_length=765)
    issued = models.IntegerField()
    lifetime = models.IntegerField()
    assoc_type = models.CharField(max_length=192)
    class Meta:
        db_table = u'social_auth_association'

class SocialAuthCode(models.Model):
    id = models.IntegerField(primary_key=True)
    email = models.CharField(max_length=225, unique=True)
    code = models.CharField(max_length=96)
    verified = models.IntegerField()
    class Meta:
        db_table = u'social_auth_code'

class SocialAuthNonce(models.Model):
    id = models.IntegerField(primary_key=True)
    server_url = models.CharField(max_length=765, unique=True)
    timestamp = models.IntegerField()
    salt = models.CharField(max_length=195, unique=True)
    class Meta:
        db_table = u'social_auth_nonce'

class SocialAuthUsersocialauth(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    provider = models.CharField(max_length=96, unique=True)
    uid = models.CharField(max_length=765, unique=True)
    extra_data = models.TextField()
    class Meta:
        db_table = u'social_auth_usersocialauth'

class SocialOauthSmsvalidate(models.Model):
    id = models.IntegerField(primary_key=True)
    phone_number = models.CharField(max_length=60)
    validate = models.CharField(max_length=60, unique=True)
    token = models.CharField(max_length=765)
    status = models.IntegerField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    class Meta:
        db_table = u'social_oauth_smsvalidate'

class SocialOauthSmsvalidatecheckfailures(models.Model):
    id = models.IntegerField(primary_key=True)
    phone_number = models.CharField(max_length=150, unique=True, blank=True)
    failure_count = models.IntegerField()
    lockout_until = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'social_oauth_smsvalidatecheckfailures'

class SouthMigrationhistory(models.Model):
    id = models.IntegerField(primary_key=True)
    app_name = models.CharField(max_length=765)
    migration = models.CharField(max_length=765)
    applied = models.DateTimeField()
    class Meta:
        db_table = u'south_migrationhistory'

class SplashSplashconfig(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    cookie_name = models.TextField()
    cookie_allowed_values = models.TextField()
    unaffected_usernames = models.TextField()
    redirect_url = models.CharField(max_length=600)
    unaffected_url_paths = models.TextField()
    class Meta:
        db_table = u'splash_splashconfig'

class StudentAnonymoususerid(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    anonymous_user_id = models.CharField(max_length=96, unique=True)
    course_id = models.CharField(max_length=765)
    class Meta:
        db_table = u'student_anonymoususerid'

class StudentCourseaccessrole(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    org = models.CharField(max_length=192)
    course_id = models.CharField(max_length=765)
    role = models.CharField(max_length=192)
    class Meta:
        db_table = u'student_courseaccessrole'

class StudentCourseenrollment(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    course_id = models.CharField(max_length=765)
    created = models.DateTimeField(null=True, blank=True)
    is_active = models.IntegerField()
    mode = models.CharField(max_length=300)
    class Meta:
        db_table = u'student_courseenrollment'

class StudentCourseenrollmentallowed(models.Model):
    id = models.IntegerField(primary_key=True)
    email = models.CharField(max_length=765)
    course_id = models.CharField(max_length=765)
    created = models.DateTimeField(null=True, blank=True)
    auto_enroll = models.IntegerField()
    class Meta:
        db_table = u'student_courseenrollmentallowed'

class StudentDashboardconfiguration(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    recent_enrollment_time_delta = models.IntegerField()
    class Meta:
        db_table = u'student_dashboardconfiguration'

class StudentLoginfailures(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    failure_count = models.IntegerField()
    lockout_until = models.DateTimeField(null=True, blank=True)
    class Meta:
        db_table = u'student_loginfailures'

class StudentPasswordhistory(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    password = models.CharField(max_length=384)
    time_set = models.DateTimeField()
    class Meta:
        db_table = u'student_passwordhistory'

class StudentPendingchangepasswordwithphone(models.Model):
    id = models.IntegerField(primary_key=True)
    phone_number = models.CharField(max_length=150, unique=True)
    activation_key = models.CharField(max_length=96, unique=True)
    updated_at = models.DateTimeField()
    created_at = models.DateTimeField()
    class Meta:
        db_table = u'student_pendingchangepasswordwithphone'

class StudentPendingchangephone(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    activation_key = models.CharField(max_length=96, unique=True)
    updated_at = models.DateTimeField()
    created_at = models.DateTimeField()
    class Meta:
        db_table = u'student_pendingchangephone'

class StudentPendingemailchange(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    new_email = models.CharField(max_length=765)
    activation_key = models.CharField(max_length=96, unique=True)
    class Meta:
        db_table = u'student_pendingemailchange'

class StudentPendingnamechange(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    new_name = models.CharField(max_length=765)
    rationale = models.CharField(max_length=3072)
    class Meta:
        db_table = u'student_pendingnamechange'

class StudentUsersignupsource(models.Model):
    id = models.IntegerField(primary_key=True)
    site = models.CharField(max_length=765)
    user = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'student_usersignupsource'

class StudentUserstanding(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser, unique=True)
    account_status = models.CharField(max_length=93)
    changed_by = models.ForeignKey(AuthUser)
    standing_last_changed_at = models.DateTimeField()
    class Meta:
        db_table = u'student_userstanding'

class StudentUsertestgroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=96)
    description = models.TextField()
    class Meta:
        db_table = u'student_usertestgroup'

class StudentUsertestgroupUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    usertestgroup = models.ForeignKey(StudentUsertestgroup)
    user = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'student_usertestgroup_users'

class SubmissionsScore(models.Model):
    id = models.IntegerField(primary_key=True)
    student_item = models.ForeignKey(SubmissionsStudentitem)
    submission = models.ForeignKey(SubmissionsSubmission, null=True, blank=True)
    points_earned = models.IntegerField()
    points_possible = models.IntegerField()
    created_at = models.DateTimeField()
    reset = models.IntegerField()
    class Meta:
        db_table = u'submissions_score'

class SubmissionsScoresummary(models.Model):
    id = models.IntegerField(primary_key=True)
    student_item = models.ForeignKey(SubmissionsStudentitem, unique=True)
    highest = models.ForeignKey(SubmissionsScore)
    latest = models.ForeignKey(SubmissionsScore)
    class Meta:
        db_table = u'submissions_scoresummary'

class SubmissionsStudentitem(models.Model):
    id = models.IntegerField(primary_key=True)
    student_id = models.CharField(max_length=765)
    course_id = models.CharField(max_length=765)
    item_id = models.CharField(max_length=765)
    item_type = models.CharField(max_length=300)
    class Meta:
        db_table = u'submissions_studentitem'

class SubmissionsSubmission(models.Model):
    id = models.IntegerField(primary_key=True)
    uuid = models.CharField(max_length=108)
    student_item = models.ForeignKey(SubmissionsStudentitem)
    attempt_number = models.IntegerField()
    submitted_at = models.DateTimeField()
    created_at = models.DateTimeField()
    raw_answer = models.TextField()
    class Meta:
        db_table = u'submissions_submission'

class SurveySurveyanswer(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    form = models.ForeignKey(SurveySurveyform)
    field_name = models.CharField(max_length=765)
    field_value = models.CharField(max_length=3072)
    class Meta:
        db_table = u'survey_surveyanswer'

class SurveySurveyform(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    name = models.CharField(max_length=765, unique=True)
    form = models.TextField()
    class Meta:
        db_table = u'survey_surveyform'

class TrackTrackinglog(models.Model):
    id = models.IntegerField(primary_key=True)
    dtcreated = models.DateTimeField()
    username = models.CharField(max_length=96)
    ip = models.CharField(max_length=96)
    event_source = models.CharField(max_length=96)
    event_type = models.CharField(max_length=1536)
    event = models.TextField()
    agent = models.CharField(max_length=768)
    page = models.CharField(max_length=1536, blank=True)
    time = models.DateTimeField()
    host = models.CharField(max_length=192)
    class Meta:
        db_table = u'track_trackinglog'

class UniversityAuthUniversityauth(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    university = models.CharField(max_length=189)
    uid = models.CharField(max_length=189)
    data = models.CharField(max_length=6141)
    class Meta:
        db_table = u'university_auth_universityauth'

class UserApiUsercoursetag(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    key = models.CharField(max_length=765)
    course_id = models.CharField(max_length=765)
    value = models.TextField()
    class Meta:
        db_table = u'user_api_usercoursetag'

class UserApiUserorgtag(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    key = models.CharField(max_length=765)
    org = models.CharField(max_length=765)
    value = models.TextField()
    class Meta:
        db_table = u'user_api_userorgtag'

class UserApiUserpreference(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    key = models.CharField(max_length=765)
    value = models.TextField()
    class Meta:
        db_table = u'user_api_userpreference'

class VerifyStudentSoftwaresecurephotoverification(models.Model):
    id = models.IntegerField(primary_key=True)
    status = models.CharField(max_length=300)
    status_changed = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    name = models.CharField(max_length=765)
    face_image_url = models.CharField(max_length=765)
    photo_id_image_url = models.CharField(max_length=765)
    receipt_id = models.CharField(max_length=765)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    submitted_at = models.DateTimeField(null=True, blank=True)
    reviewing_user = models.ForeignKey(AuthUser, null=True, blank=True)
    reviewing_service = models.CharField(max_length=765)
    error_msg = models.TextField()
    error_code = models.CharField(max_length=150)
    photo_id_key = models.TextField()
    window = models.ForeignKey(ReverificationMidcoursereverificationwindow, null=True, blank=True)
    display = models.IntegerField()
    grade = models.ForeignKey(ReverificationMidcoursereverificationgrade, null=True, blank=True)
    class Meta:
        db_table = u'verify_student_softwaresecurephotoverification'

class VerifyStudentVerificationrequest(models.Model):
    id = models.IntegerField(primary_key=True)
    edx_id = models.CharField(max_length=765)
    expected_name = models.CharField(max_length=765)
    photo_id = models.CharField(max_length=765)
    photo_id_key = models.CharField(max_length=6042)
    send_response_to = models.CharField(max_length=765)
    user_photo = models.CharField(max_length=765)
    user_photo_key = models.CharField(max_length=3072)
    status = models.IntegerField()
    class Meta:
        db_table = u'verify_student_verificationrequest'

class VerifyStudentVerifyinformation(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    verification = models.ForeignKey(VerifyStudentSoftwaresecurephotoverification)
    type = models.CharField(max_length=150)
    number = models.CharField(max_length=765)
    cn_name = models.CharField(max_length=765)
    en_name = models.CharField(max_length=765)
    class Meta:
        db_table = u'verify_student_verifyinformation'

class VideoCcidwithoutwatermark(models.Model):
    id = models.IntegerField(primary_key=True)
    ccid = models.CharField(max_length=765, unique=True)
    status = models.IntegerField()
    class Meta:
        db_table = u'video_ccidwithoutwatermark'

class VoteActivity(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765)
    description = models.TextField()
    title = models.CharField(max_length=765)
    user = models.ForeignKey(AuthUser)
    status = models.IntegerField()
    location = models.CharField(max_length=765)
    created = models.DateTimeField()
    class Meta:
        db_table = u'vote_activity'

class VoteCandidate(models.Model):
    id = models.IntegerField(primary_key=True)
    vote = models.ForeignKey(VoteVote)
    title = models.CharField(max_length=765)
    description = models.TextField()
    name = models.CharField(max_length=765)
    location = models.CharField(max_length=765)
    status = models.IntegerField()
    position = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    extra_num = models.IntegerField()
    class Meta:
        db_table = u'vote_candidate'

class VoteRecord(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    vote = models.ForeignKey(VoteVote)
    candidate = models.ForeignKey(VoteCandidate)
    session_id = models.CharField(max_length=765)
    status = models.IntegerField()
    ip = models.CharField(max_length=60)
    created = models.DateTimeField()
    class Meta:
        db_table = u'vote_record'

class VoteVote(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=765)
    title = models.CharField(max_length=765)
    description = models.TextField()
    user = models.ForeignKey(AuthUser)
    activity = models.ForeignKey(VoteActivity)
    status = models.IntegerField()
    allow_anonymous = models.IntegerField()
    max_per_user = models.IntegerField()
    position = models.IntegerField()
    created = models.DateTimeField()
    class Meta:
        db_table = u'vote_vote'

class VpcSpocExternaluser(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    uid = models.CharField(max_length=192, unique=True)
    provider = models.CharField(max_length=192, unique=True)
    extra_data = models.TextField()
    class Meta:
        db_table = u'vpc_spoc_externaluser'

class VpcSpocVpcapply(models.Model):
    id = models.IntegerField(primary_key=True)
    state_changed = models.DateTimeField()
    name = models.CharField(max_length=192)
    email = models.CharField(max_length=192)
    mobile = models.CharField(max_length=96)
    telephone = models.CharField(max_length=96)
    organization = models.CharField(max_length=765)
    website = models.CharField(max_length=765)
    state = models.CharField(max_length=72)
    note = models.CharField(max_length=1536)
    class Meta:
        db_table = u'vpc_spoc_vpcapply'

class VpcSpocVpccourse(models.Model):
    id = models.IntegerField(primary_key=True)
    vpc = models.ForeignKey(VpcSpocVpcsite)
    course = models.ForeignKey(CourseMetaCourse)
    status = models.IntegerField()
    class Meta:
        db_table = u'vpc_spoc_vpccourse'

class VpcSpocVpcdetail(models.Model):
    id = models.IntegerField(primary_key=True)
    site = models.ForeignKey(VpcSpocVpcsite)
    logos = models.CharField(max_length=3072)
    pictures = models.CharField(max_length=3072)
    slogan = models.CharField(max_length=765, blank=True)
    about = models.TextField(blank=True)
    questions = models.TextField(blank=True)
    socials = models.CharField(max_length=3072, blank=True)
    contacts = models.CharField(max_length=3072, blank=True)
    links = models.CharField(max_length=3072, blank=True)
    address = models.CharField(max_length=3072, blank=True)
    class Meta:
        db_table = u'vpc_spoc_vpcdetail'

class VpcSpocVpclabel(models.Model):
    id = models.IntegerField(primary_key=True)
    category = models.ForeignKey(VpcSpocVpclabelcategory)
    slug = models.CharField(max_length=192, unique=True)
    locked = models.IntegerField()
    name = models.CharField(max_length=384)
    desp = models.CharField(max_length=3072, blank=True)
    class Meta:
        db_table = u'vpc_spoc_vpclabel'

class VpcSpocVpclabelcategory(models.Model):
    id = models.IntegerField(primary_key=True)
    slug = models.CharField(max_length=192, unique=True)
    name = models.CharField(max_length=384)
    locked = models.IntegerField()
    desp = models.CharField(max_length=765, blank=True)
    class Meta:
        db_table = u'vpc_spoc_vpclabelcategory'

class VpcSpocVpcsite(models.Model):
    id = models.IntegerField(primary_key=True)
    apply_id = models.ForeignKey(VpcSpocVpcapply, null=True, blank=True)
    microsite_name = models.CharField(max_length=384)
    domain_prefix = models.CharField(max_length=765)
    email_from_address = models.CharField(max_length=384)
    course_org = models.CharField(max_length=384)
    platform_name = models.CharField(max_length=765)
    address = models.CharField(max_length=765)
    copyright = models.CharField(max_length=765)
    lms_base = models.CharField(max_length=765)
    cms_base = models.CharField(max_length=765)
    css_overrides_file = models.CharField(max_length=675, blank=True)
    favicon_path = models.CharField(max_length=675, blank=True)
    logo_path = models.CharField(max_length=675, blank=True)
    owner = models.CharField(max_length=384)
    type = models.IntegerField()
    status = models.IntegerField()
    meta = models.TextField()
    class Meta:
        db_table = u'vpc_spoc_vpcsite'

class VpcSpocVpcunionmember(models.Model):
    id = models.IntegerField(primary_key=True)
    union = models.ForeignKey(VpcSpocVpcsite)
    name = models.CharField(max_length=765)
    description = models.CharField(max_length=3072, blank=True)
    cover = models.CharField(max_length=765)
    logo = models.CharField(max_length=765)
    banner = models.CharField(max_length=765, blank=True)
    website = models.CharField(max_length=765, blank=True)
    org = models.ForeignKey(CourseMetaOrganization, null=True, blank=True)
    site = models.ForeignKey(VpcSpocVpcsite, null=True, blank=True)
    status = models.IntegerField()
    extra = models.TextField(blank=True)
    class Meta:
        db_table = u'vpc_spoc_vpcunionmember'

class VpcSpocVpcunionmemberLabel(models.Model):
    id = models.IntegerField(primary_key=True)
    vpcunionmember = models.ForeignKey(VpcSpocVpcunionmember)
    vpclabel = models.ForeignKey(VpcSpocVpclabel)
    class Meta:
        db_table = u'vpc_spoc_vpcunionmember_label'

class VpcSpocVpcuser(models.Model):
    id = models.IntegerField(primary_key=True)
    vpc = models.ForeignKey(VpcSpocVpcsite)
    user = models.ForeignKey(AuthUser)
    role = models.IntegerField()
    number = models.CharField(max_length=192)
    name = models.CharField(max_length=192)
    department = models.CharField(max_length=384)
    mobile = models.CharField(max_length=48)
    profile_image = models.CharField(max_length=765)
    class Meta:
        db_table = u'vpc_spoc_vpcuser'

class WaffleFlag(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=300, unique=True)
    everyone = models.IntegerField(null=True, blank=True)
    percent = models.DecimalField(null=True, max_digits=5, decimal_places=1, blank=True)
    superusers = models.IntegerField()
    staff = models.IntegerField()
    authenticated = models.IntegerField()
    rollout = models.IntegerField()
    note = models.TextField()
    testing = models.IntegerField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    languages = models.TextField()
    class Meta:
        db_table = u'waffle_flag'

class WaffleFlagGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    flag = models.ForeignKey(WaffleFlag)
    group = models.ForeignKey(AuthGroup)
    class Meta:
        db_table = u'waffle_flag_groups'

class WaffleFlagUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    flag = models.ForeignKey(WaffleFlag)
    user = models.ForeignKey(AuthUser)
    class Meta:
        db_table = u'waffle_flag_users'

class WaffleSample(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=300, unique=True)
    percent = models.DecimalField(max_digits=6, decimal_places=1)
    note = models.TextField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'waffle_sample'

class WaffleSwitch(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=300, unique=True)
    active = models.IntegerField()
    note = models.TextField()
    created = models.DateTimeField()
    modified = models.DateTimeField()
    class Meta:
        db_table = u'waffle_switch'

class WikiArticle(models.Model):
    id = models.IntegerField(primary_key=True)
    current_revision = models.ForeignKey(WikiArticlerevision, unique=True, null=True, blank=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    owner = models.ForeignKey(AuthUser, null=True, blank=True)
    group = models.ForeignKey(AuthGroup, null=True, blank=True)
    group_read = models.IntegerField()
    group_write = models.IntegerField()
    other_read = models.IntegerField()
    other_write = models.IntegerField()
    class Meta:
        db_table = u'wiki_article'

class WikiArticleforobject(models.Model):
    id = models.IntegerField(primary_key=True)
    article = models.ForeignKey(WikiArticle)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField(unique=True)
    is_mptt = models.IntegerField()
    class Meta:
        db_table = u'wiki_articleforobject'

class WikiArticleplugin(models.Model):
    id = models.IntegerField(primary_key=True)
    article = models.ForeignKey(WikiArticle)
    deleted = models.IntegerField()
    created = models.DateTimeField()
    class Meta:
        db_table = u'wiki_articleplugin'

class WikiArticlerevision(models.Model):
    id = models.IntegerField(primary_key=True)
    revision_number = models.IntegerField(unique=True)
    user_message = models.TextField()
    automatic_log = models.TextField()
    ip_address = models.CharField(max_length=45, blank=True)
    user = models.ForeignKey(AuthUser, null=True, blank=True)
    modified = models.DateTimeField()
    created = models.DateTimeField()
    previous_revision = models.ForeignKey('self', null=True, blank=True)
    deleted = models.IntegerField()
    locked = models.IntegerField()
    article = models.ForeignKey(WikiArticle)
    content = models.TextField()
    title = models.CharField(max_length=1536)
    class Meta:
        db_table = u'wiki_articlerevision'

class WikiArticlesubscription(models.Model):
    subscription_ptr = models.ForeignKey(NotifySubscription, unique=True)
    articleplugin_ptr = models.ForeignKey(WikiArticleplugin, primary_key=True)
    class Meta:
        db_table = u'wiki_articlesubscription'

class WikiAttachment(models.Model):
    reusableplugin_ptr = models.ForeignKey(WikiReusableplugin, primary_key=True)
    current_revision = models.ForeignKey(WikiAttachmentrevision, unique=True, null=True, blank=True)
    original_filename = models.CharField(max_length=768, blank=True)
    class Meta:
        db_table = u'wiki_attachment'

class WikiAttachmentrevision(models.Model):
    id = models.IntegerField(primary_key=True)
    revision_number = models.IntegerField()
    user_message = models.TextField()
    automatic_log = models.TextField()
    ip_address = models.CharField(max_length=45, blank=True)
    user = models.ForeignKey(AuthUser, null=True, blank=True)
    modified = models.DateTimeField()
    created = models.DateTimeField()
    previous_revision = models.ForeignKey('self', null=True, blank=True)
    deleted = models.IntegerField()
    locked = models.IntegerField()
    attachment = models.ForeignKey(WikiAttachment)
    file = models.CharField(max_length=300)
    description = models.TextField()
    class Meta:
        db_table = u'wiki_attachmentrevision'

class WikiImage(models.Model):
    revisionplugin_ptr = models.ForeignKey(WikiRevisionplugin, primary_key=True)
    class Meta:
        db_table = u'wiki_image'

class WikiImagerevision(models.Model):
    revisionpluginrevision_ptr = models.ForeignKey(WikiRevisionpluginrevision, primary_key=True)
    image = models.CharField(max_length=6000, blank=True)
    width = models.IntegerField(null=True, blank=True)
    height = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'wiki_imagerevision'

class WikiReusableplugin(models.Model):
    articleplugin_ptr = models.ForeignKey(WikiArticleplugin, primary_key=True)
    class Meta:
        db_table = u'wiki_reusableplugin'

class WikiReusablepluginArticles(models.Model):
    id = models.IntegerField(primary_key=True)
    reusableplugin = models.ForeignKey(WikiReusableplugin)
    article = models.ForeignKey(WikiArticle)
    class Meta:
        db_table = u'wiki_reusableplugin_articles'

class WikiRevisionplugin(models.Model):
    articleplugin_ptr = models.ForeignKey(WikiArticleplugin, primary_key=True)
    current_revision = models.ForeignKey(WikiRevisionpluginrevision, unique=True, null=True, blank=True)
    class Meta:
        db_table = u'wiki_revisionplugin'

class WikiRevisionpluginrevision(models.Model):
    id = models.IntegerField(primary_key=True)
    revision_number = models.IntegerField()
    user_message = models.TextField()
    automatic_log = models.TextField()
    ip_address = models.CharField(max_length=45, blank=True)
    user = models.ForeignKey(AuthUser, null=True, blank=True)
    modified = models.DateTimeField()
    created = models.DateTimeField()
    previous_revision = models.ForeignKey('self', null=True, blank=True)
    deleted = models.IntegerField()
    locked = models.IntegerField()
    plugin = models.ForeignKey(WikiRevisionplugin)
    class Meta:
        db_table = u'wiki_revisionpluginrevision'

class WikiSimpleplugin(models.Model):
    articleplugin_ptr = models.ForeignKey(WikiArticleplugin, primary_key=True)
    article_revision = models.ForeignKey(WikiArticlerevision)
    class Meta:
        db_table = u'wiki_simpleplugin'

class WikiUrlpath(models.Model):
    id = models.IntegerField(primary_key=True)
    slug = models.CharField(max_length=150, blank=True)
    site = models.ForeignKey(DjangoSite)
    parent = models.ForeignKey('self', null=True, blank=True)
    lft = models.IntegerField()
    rght = models.IntegerField()
    tree_id = models.IntegerField()
    level = models.IntegerField()
    article = models.ForeignKey(WikiArticle)
    class Meta:
        db_table = u'wiki_urlpath'

class WorkflowAssessmentworkflow(models.Model):
    id = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    status = models.CharField(max_length=300)
    status_changed = models.DateTimeField()
    submission_uuid = models.CharField(max_length=108, unique=True)
    uuid = models.CharField(max_length=108, unique=True)
    course_id = models.CharField(max_length=765)
    item_id = models.CharField(max_length=765)
    class Meta:
        db_table = u'workflow_assessmentworkflow'

class WorkflowAssessmentworkflowstep(models.Model):
    id = models.IntegerField(primary_key=True)
    workflow = models.ForeignKey(WorkflowAssessmentworkflow)
    name = models.CharField(max_length=60)
    submitter_completed_at = models.DateTimeField(null=True, blank=True)
    assessment_completed_at = models.DateTimeField(null=True, blank=True)
    order_num = models.IntegerField()
    class Meta:
        db_table = u'workflow_assessmentworkflowstep'

class XblockConfigStudioconfig(models.Model):
    id = models.IntegerField(primary_key=True)
    change_date = models.DateTimeField()
    changed_by = models.ForeignKey(AuthUser, null=True, blank=True)
    enabled = models.IntegerField()
    disabled_blocks = models.TextField()
    class Meta:
        db_table = u'xblock_config_studioconfig'

